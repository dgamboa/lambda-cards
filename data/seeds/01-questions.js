exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('questions').truncate()
    .then(function () {
      return knex('questions').insert([
        {question: 'What is React?', answer: 'A front end, JavaScript library for building user interfaces or UI components'},
        {question: 'What is Node.js?', answer: 'Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser'},
        {question: 'Describe semantic HTML', answer: 'Tags that provide context or metadata about the element and its content for the benefit of developers and search engines. (e.g. header tag says, "this content is a header on this page!")'},
        {question: 'Name two differences between display:block and display:inline', answer: 'Block elements follow the box model and insert a line break (e.g. <h2>, <div>). Inline elements match the size of the content and don’t start a new line (e.g. <span>, <a>)'},
        {question: 'What are the 4 areas of the box model?', answer: 'From the outside in: margin, border, padding and content'},
        {question: 'In flexbox, what axes do justify-content and align-items affect?', answer: 'justify-content: main-axis, align-items: cross-axis'},
        {question: 'Why is git valuable to developers?', answer: 'It allows a team to collaborate asynchronously and manage the integration of their code. It also serves as version control with roll back and detailed change logs'},
        {question: 'Describe accessibility on the web', answer: 'Web pages built to be consumed by anyone. It means building with semantic tags, alt attributes, responsive units and manageable file sizes so anyone can access it regardless of their circumstances'},
        {question: 'Variables store data in memory. Using a classroom example, a variable is like a storage container while the variable name is the label on the container and the variable value is the item in the container', answer: 'Variables store data in memory. Using a classroom example, a variable is like a storage container while the variable name is the label on the container and the variable value is the item in the container'},
        {question: 'Why do we use functions in code?', answer: 'Functions are a way to store code blocks or actionable logic to be used in other parts of the code'},
        {question: 'Compare and contrast .forEach and .map', answer: 'They both loop through an array of items. Map requires a return statement (implicit or explicit) and returns a new array'},
        {question: 'What’s the difference between a callback and a higher order function?', answer: 'A callback is passed into a higher order function as a parameter. A higher order function takes a callback as one of its parameters'},
        {question: 'What is closure?', answer: 'A function that references parameters upstream of its own scope. It preserves the state in which it is created and retains access to variables in its lexical environment'},
        {question: "Describe the four rules of the 'this' keyword", answer: 'Global: bound to the window or console. Implicit: bound to the object left of the method call. Explicit: bound to the object passed into the explicit call (methods: call, apply and bind). New: bound to the object returned by the constructor function'},
        {question: 'Why do we need super() in an extended class?', answer: 'super accesses the constructor function of the parent class and copies the attributes to the child class'},
        {question: 'What is the DOM?', answer: "DOM stands for document object model. It's the HTML page as an object with page elements as object nodes"},
        {question: 'What is an event?', answer: 'Something that takes place within the browser (click, mouse movement, zoom, key press, etc)'},
        {question: 'What is an event listener?', answer: 'A function tied to a DOM node that listens for an event at that node'},
        {question: 'Why would we convert a NodeList into an Array?', answer: 'In order to use Array methods to manipulate the NodeList data'},
        {question: 'What is a component?', answer: 'a standalone, reusable part made of HTML, CSS and JavaScript'},
        {question: 'Describe component state', answer: 'Component state is the condition or set of conditions at a particular time that govern how the component interacts with its surroundings (user, other components, etc). If water is a component, it has three states: ice, water, steam'},
        {question: 'Describe props', answer: 'Props are the properties a component receives from a parent component or from another resource (e.g. redux store)'},
        {question: 'What are React side effects?', answer: 'Consequences of a function that extend beyond the scope of that function. The useEffect hook can sync effects to changes in state or props'},
        {question: 'Why use client-side routing?', answer: 'Client-side routing adds precision to server requests by fetching and refreshing only the components that changed as opposed to the entire page thus enhancing efficiency and speed'},
        {question: "What is the useRouteMatch hook?", answer: 'It is a more concise way of accessing the match object containing information like url, path and params. It is useful for getting access to this data without rendering a Route'},
        {question: 'Explain form validation', answer: 'A way to ensure the form collects the appropriate data type and shape before submission'},
        {question: 'What is end-to-end testing?', answer: 'Tests that check the entire user experience of an application works as intended and is resilient against edge cases'},
        {question: 'Contrast stateful vs. functional classes', answer: 'A stateful class has a slice of application state while a purely functional class only displays components'},
        {question: 'What are some differences between stateful functional components and stateful classes?', answer: 'Stateful functional components use hooks while stateful classes use a constructor and lifecycle methods. Classes also require explicit calls to the render method and use the this keyword to call class properties and functions'},
        {question: 'What is the blueprint for stateful class components?', answer: 'Declare the class, build out the constructor by passing properties into state and call render'},
        {question: 'Describe the component lifecycle', answer: 'Mounting, updating and unmounting. Mounting is invoked after React inserts a component into the DOM. Updating is invoked after a re-render. Unmount is invoked when a component is removed'},
        {question: 'Define stateful logic', answer: 'Stateful logic refers to logic operations that affect state. This can be setting or updating state, handling changes or events via helper functions, and logical filters to determine component behavior'},
        {question: 'When does componentWillMount and componentWillUpdate get called?', answer: 'componentWillMount is called just before mounting while componentWillUpdate is called just before rendering when new props or state are received by the component (note these have been deprecated -- see React docs for more)'},
        {question: 'What are the 3 steps to creating a test?', answer: 'The three steps are Arrange (define elements being tested), Act (perform the operation whose result is being tested), Assert (check expected result matches the application)'},
        {question: 'What problem does the context API help solve?', answer: 'Context API allows global access to state rather than depending solely on prop drilling'},
        {question: 'Describe actions in the context of redux', answer: 'Actions are the signals by which state changes. Actions at a minimum include an action type and can also include an action payload'},
        {question: 'Describe reducers in the context of redux', answer: 'Reducers are the intermediaries that take an action, determine the appropriate reaction, and update state accordingly'},
        {question: 'Describe the store in the context of redux', answer: 'The store is an object that contains a full representation of global state and can be accessed throughout the application through the connect function'},
        {question: 'What is redux-thunk?', answer: 'redux-thunk allows for asynchronous calls to the reducer (a thunk is a function that returns another function)'},
        {question: 'What are tokens used for?', answer: 'Tokens are used to authenticate users to a service'},
        {question: 'What are some steps developers can take on the frontend to keep data secure?', answer: 'Developers can use private routes that can only be accessed once a user is authenticated with a valid token'},
        {question: 'Describe how web servers work', answer: 'Web servers process HTTP requests sent through the web by clients. The server determines whether the request is valid (i.e. resource exists and request has proper authorization) and executes an action before responding to the client'},
        {question: 'Map HTTP methods to CRUD', answer: 'Create: POST Read: GET Update: PUT Delete: DELETE'},
        {question: 'What is backend middleware?', answer: "Functions that extend backend functionality. They get the request and response objects, can perform actions on them (but don’t have to), and can either move to the next operation or issue a response"},
        {question: 'What are the principles of the REST architecture?', answer: 'Everything is a resource. Each resource is accessible via a unique URI. Resources can have multiple representations. Communication happens over a stateless protocol (HTTP). Resource management happens via HTTP methods'},
        {question: 'What are Express Routers?', answer: 'Express is a Node framework for building web servers. Express Routers are a way of organizing route components and exposing resources through endpoints in an API. Each route listens on a specific resource for requests with a specific HTTP verb'},
        {question: 'Describe tools to manually test an API', answer: 'There are several tools like Postman, HTTPie, Insomnia, curl and browsers to test the operability of an API. They function similarly with ways to construct requests, send them via HTTP and receive responses from the API'},
        {question: 'What is a Cookie?', answer: "An HTTP cookie is a small piece of data stored on the user's computer by the web browser. Web applications use them to persist stateful information like authentication"},
      ]);
    });
};
